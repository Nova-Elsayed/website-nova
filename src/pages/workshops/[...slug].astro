---
import type { Workshop } from "@/lib/contentful";
import { contentfulClient } from "@/lib/contentful";
import { slugify } from "@/lib/utils/textConverter";
import { locationToAddress } from "@/lib/utils/locationParser";
import { simpleGermanDate } from "@/lib/utils/dateParser";
import Base from "@/layouts/Base.astro";
import RichTextContainer from "@/components/RichTextContainer.astro";
import { getWorkshops } from "@/lib/API";
import Section from "@/partials/Section.astro";
import Button from "@/components/Button.astro";
import { date } from "astro/zod";
import { simpleGermanDateWithTime } from "@/lib/utils/dateParser";

export const prerender = true;

export async function getStaticPaths() {
  const pages = await getWorkshops();
  return pages;
}

const eventDate = (dateStart:string, dateEnd:string) => {
  const start = new Date(dateStart);
  const end = new Date(dateEnd);

  if (start.getDay() === end.getDay()) {
    return `${readableDate}, ${start.getHours()}:${start.getMinutes().toString().padStart(2, "0")} — ${end.getHours()}:${end.getMinutes().toString().padStart(2, "0")} Uhr`;
  } else {
    return `${simpleGermanDateWithTime(dateStart)} Uhr bis ${simpleGermanDateWithTime(dateEnd)} Uhr`;
  }
};

const {
  slug,
  title,
  headline,
  description,
  location,
  dateStart,
  dateEnd,
  parentTitle,
  parentURL,
  ticketLink,
  imageURL,
} = Astro.props;

const readableDate = simpleGermanDate(dateStart);
---

<Base title={headline} meta_title={headline}>
  <header class="w-screen py-16 mt-12 text-center">
    <p set:html="— Workshop —" class="mb-8 tracking-wide text-md optical-md" />
    <h1 set:html={headline} class="mb-8 text-2xl optical-lg" />
    {
      imageURL && (
        <img
          class="mx-auto mb-8 w-96 h-96 border-1 border-stone-100 object-cover outline outline-2 outline-stone-800 outline-offset-2"
          src={imageURL}
          alt=""
        />
      )
    }
    <h2 set:html={parentTitle} class="mb-2 text-xl" />
    <p set:html={readableDate} class="text-md" />
  </header>
  <Section>
    <RichTextContainer class="mb-16 text-left" content={description} />
    <div
      class="mx-auto prose font-serif rich-text-container text-base text-left"
    >
      <p>
        <b>Wann:</b>
        <br />
        {() => eventDate(dateStart, dateEnd)}
      </p>

      {
        async () => {
          if (!location) {
            return;
          }
          const address = await locationToAddress(location);

          return (
            <p>
              <b>Wo:</b> <br />
              <a href={parentURL}>{parentTitle}</a> <br />
              {`${address.road} ${address.house_number}`} <br />
              {`${address.postcode} ${address.city || address.village}`} <br />
            </p>
          );
        }
      }
    </div>
    {
      ticketLink && (
        <div class="flex w-full link-bar mt-8">
          <Button
            label="Zu den Tickets"
            href={ticketLink}
            className="mx-auto"
            target="_blank"
          />
        </div>
      )
    }
  </Section>
</Base>
