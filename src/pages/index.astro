---
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import type { Button, Feature } from "@/types";
import { getEntry } from "astro:content";
import { FaCheck } from "react-icons/fa";

interface Homepage {
  banner: {
    title: string;
    subtitle: string;
    content: string;
    image: string;
    cta_about: Button;
    cta_contact: Button;
  };
  opener: {
    quote: string;
    title: string;
    content: string;
  }
  features: Feature[];
}

const homepage = await getEntry("homepage", "-index");
const testimonial = await getEntry("sections", "testimonial");
const call_to_action = await getEntry("sections", "call-to-action");
const { banner, opener, features }: Homepage = homepage.data;
---

<Base>
  <!-- Banner -->
  <section class="section pt-14">
    <div class="container">
      <div class="row items-center">
        <div class="lg:col-6 md:col-6 text-left">
          <h1
            set:html={markdownify(banner.title)}
            class="mb-4 text-h3 lg:text-h1"
          />
          <h2
            set:html={markdownify(banner.subtitle)}
            class="text-h4 lg:text-h2"
          />
          <p set:html={markdownify(banner.content)} class="mb-8" />

          {
            banner.cta_about.enable && (
              <a
                class="btn btn-primary"
                href={banner.cta_about.link}
                target={
                  banner.cta_about.link.startsWith("http") ? "_blank" : "_self"
                }
                rel="noopener"
              >
                {banner.cta_about.label}
              </a>
            )
          }
          {
            banner.cta_contact.enable && (
              <a
                class="btn btn-primary"
                href={banner.cta_contact.link}
                target={
                  banner.cta_contact.link.startsWith("http")
                    ? "_blank"
                    : "_self"
                }
                rel="noopener"
              >
                {banner.cta_contact.label}
              </a>
            )
          }
        </div>
        {
          banner.image && (
            <div class="col-6">
              <ImageMod
                src={banner.image}
                alt="banner"
                width={1736}
                height={1736}
                class="rounded-full"
                format="webp"
              />
            </div>
          )
        }
      </div>
    </div>
  </section>
  <!-- /Banner -->
  <!-- Opener -->
  <section class="section pb-0">
    <div class="container">
      <div class="row items-center justify-center">
        <div class="text-center">
          <h1
            set:html={markdownify(opener.quote)}
            class="mb-4 text-h3 lg:text-h1"
          />
          <h2
            set:html={markdownify(opener.title)}
            class="text-h4 lg:text-h2 mb-4"
          />
          <p set:html={markdownify(opener.content)} class="mb-8 text-left" />
        </div>
      </div>
    </div>
  </section>

  <!-- /Opener -->

  <!-- Features -->
  {
    features.map((feature, index: number) => (
      <section class={`section-sm ${index % 2 === 0 && "bg-gradient"}`}>
        <div class="container">
          <div class="row items-center justify-between">
            <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
              <!--h1 set:html={markdownify(feature.quote)} class="mb-4" / -->
              <h2 set:html={markdownify(feature.title)} class="mb-4" />
              <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />
              <ul>
                {feature.bulletpoints.map((bullet: string) => (
                  <li class="relative mb-4 pl-6">
                    <FaCheck className={"absolute left-0 top-1.5"} />
                    <span set:html={markdownify(bullet)} />
                  </li>
                ))}
              </ul>
              {feature.button.enable && (
                <a class="btn btn-primary mt-5" href={feature.button.link}>
                  {feature.button.label}
                </a>
              )}
            </div>
          </div>
        </div>
      </section>
    ))
  }
  <!-- /Features -->

  <Testimonial testimonial={testimonial} />
  <CallToAction call_to_action={call_to_action} />
</Base>
